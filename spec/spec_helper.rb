# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  # Enable both 'should' and 'expect' syntax:
  config.expect_with :rspec do |c|
    # Disable the `expect` sytax...
    #c.syntax = :should

    # ...or disable the `should` syntax...
    #c.syntax = :expect

    # ...or explicitly enable both
    c.syntax = [:should, :expect]
  end

end

require 'pathname'
require_relative '../lib/exceltocsv'

def file_to_array(filepath)
  dump = []
  File.open(filepath) do |f|
    f.each_line { |line| dump << line }
  end
  dump
end

def file_contains?(haystack, needle)
  result = false
  File.open(haystack) do |f|
    f.each_line { |line| result = true if line.include?(needle) }
  end
  result
end

def file_to_string(filename)
  result = ""
  File.open(filename) do |f|
    f.each_line { |line| result << line }
  end
  result
end

def file_row_starting_with(filename, starts_with)
  rows = file_to_array filename
  rows.each do |r|
    return r if r.include? starts_with
  end
  ""
end


def last_item_from_row(row_starts_with, filename)
  row = file_row_starting_with(filename, row_starts_with)
  items = row.split(',')
  items.each { |i| i.chomp! }
  items[items.size - 1]
end


